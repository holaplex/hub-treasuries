//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use fireblocks::objects::transaction::TransactionStatus as FbTransactionStatusEnum;
use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "transaction_status")]
pub enum TransactionStatus {
    #[sea_orm(string_value = "blocked")]
    Blocked,
    #[sea_orm(string_value = "broadcasting")]
    Broadcasting,
    #[sea_orm(string_value = "canceled")]
    Canceled,
    #[sea_orm(string_value = "completed")]
    Completed,
    #[sea_orm(string_value = "confirming")]
    Confirming,
    #[sea_orm(string_value = "failed")]
    Failed,
    #[sea_orm(string_value = "partially_completed")]
    PartiallyCompleted,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "pending_3rd_party")]
    Pending3rdParty,
    #[sea_orm(string_value = "pending_3rd_party_manual_approval")]
    Pending3rdPartyManualApproval,
    #[sea_orm(string_value = "pending_aml_screening")]
    PendingAmlScreening,
    #[sea_orm(string_value = "pending_authorization")]
    PendingAuthorization,
    #[sea_orm(string_value = "pending_signature")]
    PendingSignature,
    #[sea_orm(string_value = "queued")]
    Queued,
    #[sea_orm(string_value = "rejected")]
    Rejected,
    #[sea_orm(string_value = "submitted")]
    Submitted,
}

impl From<FbTransactionStatusEnum> for TransactionStatus {
    fn from(value: FbTransactionStatusEnum) -> Self {
        match value {
            FbTransactionStatusEnum::SUBMITTED => Self::Submitted,
            FbTransactionStatusEnum::QUEUED => Self::Queued,
            FbTransactionStatusEnum::PENDING_AUTHORIZATION => Self::PendingAuthorization,
            FbTransactionStatusEnum::PENDING_SIGNATURE => Self::PendingSignature,
            FbTransactionStatusEnum::BROADCASTING => Self::Broadcasting,
            FbTransactionStatusEnum::PENDING_3RD_PARTY_MANUAL_APPROVAL => {
                Self::Pending3rdPartyManualApproval
            },
            FbTransactionStatusEnum::PENDING_3RD_PARTY => Self::Pending3rdParty,
            FbTransactionStatusEnum::CONFIRMING => Self::Confirming,
            FbTransactionStatusEnum::PARTIALLY_COMPLETED => Self::PartiallyCompleted,
            FbTransactionStatusEnum::PENDING_AML_SCREENING => Self::PendingAmlScreening,
            FbTransactionStatusEnum::COMPLETED => Self::Completed,
            FbTransactionStatusEnum::CANCELLED => Self::Canceled,
            FbTransactionStatusEnum::REJECTED => Self::Rejected,
            FbTransactionStatusEnum::BLOCKED => Self::Blocked,
            FbTransactionStatusEnum::FAILED => Self::Failed,
            FbTransactionStatusEnum::PENDING => Self::Pending,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "event_type")]
pub enum EventType {
    #[sea_orm(string_value = "create_drop")]
    CreateDrop,
    #[sea_orm(string_value = "mint_drop")]
    MintDrop,
}
